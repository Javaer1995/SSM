<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.rain.mybatis.mapper.DynamicSQLMapper">

    <!--List<Emp> getEmpsByCondition(Emp emp);-->
    <select id="getEmpsByConditionOne" resultType="Emp">
        select * from t_emp where 1=1
        <!--
            if标签：通过test属性中的表达式判断标签中的内容是否会拼接到sql中
        -->
        <if test="empName != '' and empName != null">
            and emp_name = #{empName}
        </if>
        <if test="age != '' and age != null">
            and age = #{age}
        </if>
        <if test="gender != '' and gender != null">
            and gender = #{gender}
        </if>
    </select>

    <!--List<Emp> getEmpsByCondition(Emp emp);-->
    <select id="getEmpsByConditionTwo" resultType="Emp">
        select * from t_emp
        <!--
            where标签的效果：
            1、若标签中有条件成立，则自动生成where关键字，且能自动删除多余的and关键字
            2、若标签中没有任何条件成立，则没有任何功能
        -->
        <where>
            <if test="empName != '' and empName != null">
                and emp_name = #{empName}
            </if>
            <if test="age != '' and age != null">
                and age = #{age}
            </if>
            <if test="gender != '' and gender != null">
                and gender = #{gender}
            </if>
        </where>
    </select>


    <!--List<Emp> getEmpsByCondition(Emp emp);-->
    <select id="getEmpsByConditionThree" resultType="Emp">
        select * from t_emp
        <!--
            trim标签：用于添加或去掉标签中的内容
                prefix属性：在标签中内容的前面添加指定的内容
                suffix属性：在标签中内容的后面添加指定的内容
                prefixOverrides属性：在标签中内容的前面去掉指定的内容
                suffixOverrides属性：在标签中内容的后面去掉指定的内容
        -->
        <trim prefix="where" suffixOverrides="and">
            <if test="empName != '' and empName != null">
                emp_name = #{empName} and
            </if>
            <if test="age != '' and age != null">
                age = #{age} and
            </if>
            <if test="gender != '' and gender != null">
                gender = #{gender} and
            </if>
        </trim>
    </select>
    


    <!--List<Emp> getEmpsByCondition(Emp emp);-->
    <select id="getEmpsByConditionFour" resultType="Emp">
        select * from t_emp
        <where>
            <!--
                choose、when和otherwise标签组合（少用）：
                when（相当于if...else）至少有一个，otherwise（相当于else）至多有一个
            -->
            <choose>
                <when test="empName != '' and empName != null">
                    emp_name = #{empName}
                </when>
                <when test="age != '' and age != null">
                    age = #{age}
                </when>
                <when test="gender != '' and gender != null">
                    gender = #{gender}
                </when>
            </choose>
        </where>
    </select>

    <!--void insertMoreEmp(@Param("emps") List<Emp> emps);-->
    <!--
        foreach标签：
            collection属性：设置要循环的数组或集合
            item属性：设置表示数组或集合中迭代元素的变量名
            separator属性：设置每次foreach循环之间的分隔符
    -->
    <insert id="insertMoreEmp">
        insert into t_emp values
        <foreach collection="emps" item="emp" separator=",">
            (null ,#{emp.empName},#{emp.age},#{emp.gender},null)
        </foreach>
    </insert>

    <!--void deleteMoreEmp(@Param("empIds") Integer[] empIds);-->
    <!--
        foreach标签：
            collection属性：设置要循环的数组或集合
            item属性：设置表示数组或集合中迭代元素的变量名
            separator属性：设置每次foreach循环之间的分隔符
            open属性：设置foreach循环体的前缀
            close属性：设置foreach循环体的后缀
    -->
    <delete id="deleteMoreEmp">
        <!--delete from t_emp where emp_id in
        <foreach collection="empIds" item="empId" separator="," open="(" close=")">
            #{empId}
        </foreach>-->

        delete from t_emp where
        <foreach collection="empIds" item="empId" separator="or">
            emp_id = #{empId}
        </foreach>
    </delete>


    <!--
        sql标签：设置一个sql片段
    -->
    <sql id="empColumns">
        emp_id,emp_name,age,gender
    </sql>

    <!--List<Emp> getEmpsByCondition(Emp emp);-->
    <!--
        include标签：
            refid属性：通过sql标签的id引用相关sql片段
    -->
    <select id="getEmpsByCondition" resultType="Emp">
        select <include refid="empColumns"></include> from t_emp
    </select>

</mapper>